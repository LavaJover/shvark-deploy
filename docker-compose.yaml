services:
  user-db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: shvark_user_service
    volumes:
      - user_pgdata:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    
  banking-db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: shvark_banking_service
    volumes:
      - banking_pgdata:/var/lib/postgresql/data
    ports:
      - "5434:5432"

  order-db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: shvark_order_service
    volumes:
      - order_pgdata:/var/lib/postgresql/data
    ports:
      - "5435:5432"

  authz-db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: shvark_authz_service
    volumes:
      - authz_pgdata:/var/lib/postgresql/data
    ports:
      - "5436:5432"

  tether-wallet-db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: shvark_tether_wallet_service
    volumes:
      - wallet_pgdata:/var/lib/postgresql/data
    ports:
      - "5437:5432"

  order-bot-db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: shvark_order_bot_service
    volumes:
      - order_bot_pgdata:/var/lib/postgresql/data
    ports:
      - "5438:5432"

  arbitrage-bot-db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: shvark_arbitrage_bot_service
    volumes:
      - arbitrage_bot_pgdata:/var/lib/postgresql/data
    ports:
      - "5439:5432"
  
  order-bot:
    build:
      context: ./services/shvark-order-bot
    depends_on:
      order-bot-db:
        condition: service_started
      kafka:
        condition: service_healthy
    ports:
      - "50066:50066"
    restart: on-failure

  arbitrage-bot:
    build:
      context: ./services/shvark-arbitrage-bot
    depends_on:
      arbitrage-bot-db:
        condition: service_started
      kafka:
        condition: service_healthy
    ports:
      - "50067:50067"
    restart: on-failure
  
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 5s
      timeout: 10s
      retries: 10

  kafka:
    image: confluentinc/cp-kafka:7.4.1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ADVERTISED_HOST_NAME: kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 10s
      timeout: 20s
      retries: 10

  user-service:
    build: 
      context: ./services/user-service
    depends_on:
      - user-db
    ports:
      - "50052:50052"
    restart: on-failure

  sso-service:
    build: 
      context: ./services/sso-service
    depends_on:
      - user-service
    ports:
      - "50051:50051"
    restart: on-failure

  banking-service:
    build: 
      context: ./services/banking-service
    depends_on:
      - banking-db
    ports:
      - "50057:50057"
    restart: on-failure

  authz-service:
    build: 
      context: ./services/authz-service
    depends_on:
      - authz-db
    ports:
      - "50054:50054"
    restart: on-failure

  order-service:
    build: 
      context: ./services/order-service
    depends_on:
      - order-db
      - banking-service
      - kafka
    ports:
      - "50058:50058"
    restart: on-failure
  
  api-gateway:
    build: 
      context: ./services/api-gateway
    depends_on:
      - user-service
      - sso-service
      - authz-service
      - banking-service
      - order-service
    ports:
      - "8080:8080"

  shvark-front:
    build:
      context: ./services/shvark-front
    depends_on:
      - api-gateway
    ports:
      - "80:80"

  tether-wallet-service:
    build:
      context: ./services/tether-wallet-service
    depends_on:
      - tether-wallet-db
    ports:
      - "3000:3000"

volumes:
  user_pgdata:
  order_pgdata:
  banking_pgdata:
  authz_pgdata:
  wallet_pgdata:
  order_bot_pgdata:
  arbitrage_bot_pgdata: